{% extends 'base.html.twig' %}

{% block title %}Metrics Analysis{% endblock %}

{% block body %}
<div class="container-metrics">
    <div class="main-content">
        <div class="improvements">
            <h1>Förbättringar</h1>
            <p>
                Här är några förbättringar jag planerar att göra:
            </p>
            <ul>
                <li><strong>Öka kodtäckning: </strong> Jag planerar att öka kodtäckningen genom att skriva fler tester och förbättra befintliga tester.
                <li><strong> Typdeklaration: </strong> Jag planerar att lägga till typdeklarationer för att förbättra kodens läsbarhet och förhindra fel.
                <li><strong>Minska Komplexiteten: </strong> Jag planerar att minska komplexiteten genom att dela upp stora funktioner i mindre delar och undvika komplexa logik.
            </ul>

            <h2>Innan förbättringar: </h2>
                <p><strong>kodtäckning:</strong> 21%</p>
                <p><strong>Kvalitetsindex i Scrutinizer:</strong> 10/10</p>
                <p><strong>Komplexiteten:</strong> Hög komplexitet i vissa klasser med cyklomatisk komplexitet på 9.</p>

            <h2>Efter förbättringar: </h2>
                <p><strong>kodtäckning:</strong> 23%</p>
                    <a href="{{ asset('img/afterTests.png') }}">
                        <img src="{{ asset('img/afterTests.png') }}" alt="Stable Abstractions Principle diagram" class="picture-about"><br>
                    </a><p>Som vi ser har book gått från 0% till 100% vilket är en förbättring.
                    Samtidigt så har Player klassen förbättrats från 82.76% till 93.1%.</p>

                    <p>Kvalitetsindex i Scrutinizer: 10/10 Inga förbättringar behövs.</p>

                    <p><strong>Komplexiteten:</strong></p>
                        <p> Efter förbättringar har komplexiteten minskat i vissa klasser till 6 i cyklomatisk komplexitet.</p>

            <h2>Diskussion</h2>
            <p>
                Genom att använda verktyg som Phpmetrics och Scrutinizer kan man aktivt arbeta med att förbättra kodkvaliteten.
                Det finns många fördelar, inklusive förbättrad läsbarhet, enklare underhåll och bättre prestanda. 
                Nackdelar kan vara tidskrävande förbättringar och behovet av att kontinuerligt uppdatera kodbasen. 
                Att arbeta mot "clean code" är en pågående process som kräver regelbundet underhåll och förbättring.
                Om man strävar att arbeta mot "clean code" så är det värt i slutändan eftersom det förbättrar kodkvaliteten och underhållet. 
                Det blir dessutom enklare i slutändan att bygga ut koden.
            </p>
        </div>
            
    </div>
    <div class="side-bar">
            <h2>Phpmetrics</h2>
            <p>Läs mer om phpmetrics</p>
            <a href="{{ path('phpmetrics') }}">Phpmetrics</a>
            
            <h2>Scrutinizer</h2>
            <p>Läs mer om Scrutinizer</p>
            <a href="{{ path('scrutinizer') }}">scrutinizer</a>
    </div>
</div>
{% endblock %}
